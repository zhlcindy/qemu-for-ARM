From 1bf8bf5ff249b5814be7f8486d793da136926989 Mon Sep 17 00:00:00 2001
From: Li Zhang <zhlcindy@gmail.com>
Date: Tue, 17 Oct 2017 18:11:24 +0800
Subject: [RFC PATCH 7/8] Add CPU topology for ARM architecture.

This patch is to add ARM CPU topology.

Signed-off-by: Li Zhang <li.zhang@hxt-semitech.com>
---
 include/hw/arm/topology.h | 86 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 86 insertions(+)
 create mode 100644 include/hw/arm/topology.h

diff --git a/include/hw/arm/topology.h b/include/hw/arm/topology.h
new file mode 100644
index 0000000..2d75221
--- /dev/null
+++ b/include/hw/arm/topology.h
@@ -0,0 +1,86 @@
+/*
+ *  ARM CPU topology data structures and functions
+ *
+ *  Copyright (c) 2017 HXT semi-conductor technology Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+#ifndef HW_ARM_TOPOLOGY_H
+#define HW_ARM_TOPOLOGY_H
+
+#include "qemu/bitops.h"
+
+
+typedef struct ARMCPUTopoInfo {
+    unsigned cluster_id;
+    unsigned core_id;
+    unsigned thread_id;
+} ARMCPUTopoInfo;
+
+/* limit the number of VCPUs in level0 dute to a limitation 
+ * to 16 CPUs in that level in the ICC_SGIxR registers of the 
+ * GICv3 to be able to address each CPU directly when sending IPIs.
+ * refer to arch/arm64/kvm/sys_regs.c, kvm assumes vcpu enable SMT.
+ * here we also enable SMT on default.  
+ */
+
+/*get mp_affinity from topology*/
+static inline uint64_t arm_cpuid_from_topo(const ARMCPUTopoInfo *topo)
+{
+    return topo->cluster_id << ARM_AFF2_SHIFT |
+           topo->core_id << ARM_AFF1_SHIFT |
+           topo->thread_id << ARM_AFF2_SHIFT;
+}
+
+static inline void arm_topo_from_idx(unsigned nr_cores,
+                                     unsigned nr_threads,
+                                     unsigned cpu_index,
+                                     ARMCPUTopoInfo *topo)
+{
+    unsigned core_idx = cpu_index / nr_threads;
+    topo->thread_id = cpu_index % nr_threads;
+    topo->core_id = core_idx % nr_cores;
+    topo->cluster_id = core_idx / nr_cores;
+}
+
+/* Calculate thread/core/package IDs for a specific topology,
+ * based on mpidr.
+ */
+static inline void arm_topo_from_cpuid(uint64_t mp_affinity,
+                                           ARMCPUTopoInfo *topo)
+{
+    topo->thread_id = (mp_affinity & 0x0f) >> ARM_AFF0_SHIFT;
+    topo->core_id = (mp_affinity & ARM_AFF1_MASK) >> ARM_AFF1_SHIFT;
+    topo->cluster_id = (mp_affinity & ARM_AFF1_MASK) >>  ARM_AFF2_SHIFT;
+}
+
+/* Make CPUID for the CPU 'cpu_index'
+ *
+ * 'cpu_index' is a sequential, contiguous ID for the CPU.
+ */
+static inline uint64_t arm_cpuid_from_cpu_idx(unsigned nr_cores,
+                                              unsigned nr_threads,
+                                              unsigned cpu_index)
+{
+    ARMCPUTopoInfo topo;
+    arm_topo_from_idx(nr_cores, nr_threads, cpu_index, &topo);
+    return arm_cpuid_from_topo(&topo);
+}
+
+#endif /* HW_ARM_TOPOLOGY_H */
-- 
2.7.4

