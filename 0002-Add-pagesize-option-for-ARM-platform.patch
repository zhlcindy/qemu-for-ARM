From 1e0252dc73efe0935e48fcb210285b2268c72825 Mon Sep 17 00:00:00 2001
From: Li Zhang <li.zhang@hxt-semitech.com>
Date: Mon, 2 Jul 2018 10:17:23 +0800
Subject: [PATCH 2/2] Add pagesize option for ARM platform.

For ARM platform, pagesize can be 4K, 16K, 64K. So it's allowed to users
to specifiy the pagesize to improve performance.

Signed-off-by: Li Zhang <li.zhang@hxt-semitech.com>
---
 hw/arm/virt.c | 37 +++++++++++++++++++++++++++++++++++++
 vl.c          | 13 +++++++------
 2 files changed, 44 insertions(+), 6 deletions(-)

diff --git a/hw/arm/virt.c b/hw/arm/virt.c
index 98b99cf..7b71ebd 100644
--- a/hw/arm/virt.c
+++ b/hw/arm/virt.c
@@ -1586,6 +1586,37 @@ static void virt_set_iommu(Object *obj, const char *value, Error **errp)
     }
 }
 
+static char *virt_get_pagesize(Object *obj, Error **errp)
+{
+    MachineState *ms = MACHINE(obj);
+    MachineClass *mc = MACHINE_GET_CLASS(ms);
+    switch (mc->minimum_page_bits) {
+    case 12:
+        return g_strdup("4096");
+    case 14:
+        return g_strdup("16384");
+    case 16:
+        return g_strdup("65536");
+    default:
+        g_assert_not_reached();
+    }
+}
+
+static void virt_set_pagesize(Object *obj, const char *value, Error **errp)
+{
+    MachineState *ms = MACHINE(obj);
+    MachineClass *mc = MACHINE_GET_CLASS(ms);
+    if (!strcmp(value, "4096")) {
+        mc->minimum_page_bits = 12;
+    } else if (!strcmp(value, "16384")) {
+        mc->minimum_page_bits = 14;
+    } else if (!strcmp(value, "65536")) {
+        mc->minimum_page_bits = 16;
+    } else {
+        error_setg(errp, "Invalid pagesize value");
+    }
+}
+
 static CpuInstanceProperties
 virt_cpu_index_to_props(MachineState *ms, unsigned cpu_index)
 {
@@ -1673,6 +1704,12 @@ static void virt_machine_class_init(ObjectClass *oc, void *data)
     assert(!mc->get_hotplug_handler);
     mc->get_hotplug_handler = virt_machine_get_hotplug_handler;
     hc->plug = virt_machine_device_plug_cb;
+
+    object_class_property_add_str(oc, "pagesize",
+        virt_get_pagesize, virt_set_pagesize, NULL);
+    object_class_property_set_description(oc, "pagesize",
+        "Target Page size", NULL);
+
 }
 
 static const TypeInfo virt_machine_info = {
diff --git a/vl.c b/vl.c
index b3426e0..598db50 100644
--- a/vl.c
+++ b/vl.c
@@ -4001,6 +4001,13 @@ int main(int argc, char **argv, char **envp)
     object_property_add_child(object_get_root(), "machine",
                               OBJECT(current_machine), &error_abort);
 
+    machine_opts = qemu_get_machine_opts();
+    if (qemu_opt_foreach(machine_opts, machine_set_property, current_machine,
+                         NULL)) {
+        object_unref(OBJECT(current_machine));
+        exit(1);
+    }
+
     if (machine_class->minimum_page_bits) {
         if (!set_preferred_target_page_bits(machine_class->minimum_page_bits)) {
             /* This would be a board error: specifying a minimum smaller than
@@ -4248,12 +4255,6 @@ int main(int argc, char **argv, char **envp)
         exit(0);
     }
 
-    machine_opts = qemu_get_machine_opts();
-    if (qemu_opt_foreach(machine_opts, machine_set_property, current_machine,
-                         NULL)) {
-        object_unref(OBJECT(current_machine));
-        exit(1);
-    }
 
     configure_accelerator(current_machine);
 
-- 
1.8.3.1

